// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_falt.sql

package db

import (
	"context"
)

const createUserFlat = `-- name: CreateUserFlat :one
INSERT INTO user_flats (
  username, flat_id, is_admin, balance
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, flat_id, is_admin, balance, deleted_at, created_at, updated_at
`

type CreateUserFlatParams struct {
	Username string
	FlatID   int32
	IsAdmin  bool
	Balance  float64
}

// Create
func (q *Queries) CreateUserFlat(ctx context.Context, arg CreateUserFlatParams) (UserFlat, error) {
	row := q.db.QueryRowContext(ctx, createUserFlat,
		arg.Username,
		arg.FlatID,
		arg.IsAdmin,
		arg.Balance,
	)
	var i UserFlat
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FlatID,
		&i.IsAdmin,
		&i.Balance,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFlat = `-- name: GetUserFlat :one
SELECT id, username, flat_id, is_admin, balance, deleted_at, created_at, updated_at FROM user_flats
WHERE id = $1 AND deleted_at IS NULL
`

// Read
func (q *Queries) GetUserFlat(ctx context.Context, id int32) (UserFlat, error) {
	row := q.db.QueryRowContext(ctx, getUserFlat, id)
	var i UserFlat
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FlatID,
		&i.IsAdmin,
		&i.Balance,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteUserFlat = `-- name: HardDeleteUserFlat :exec
DELETE FROM user_flats
WHERE id = $1
`

// Hard Delete
func (q *Queries) HardDeleteUserFlat(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, hardDeleteUserFlat, id)
	return err
}

const softDeleteUserFlat = `-- name: SoftDeleteUserFlat :exec
UPDATE user_flats
SET 
  deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

// Delete (Soft Delete)
func (q *Queries) SoftDeleteUserFlat(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, softDeleteUserFlat, id)
	return err
}

const updateUserFlat = `-- name: UpdateUserFlat :one
UPDATE user_flats
SET 
  is_admin = $1, 
  balance = $2
WHERE id = $3 AND deleted_at IS NULL
RETURNING id, username, flat_id, is_admin, balance, deleted_at, created_at, updated_at
`

type UpdateUserFlatParams struct {
	IsAdmin bool
	Balance float64
	ID      int32
}

// Update
func (q *Queries) UpdateUserFlat(ctx context.Context, arg UpdateUserFlatParams) (UserFlat, error) {
	row := q.db.QueryRowContext(ctx, updateUserFlat, arg.IsAdmin, arg.Balance, arg.ID)
	var i UserFlat
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FlatID,
		&i.IsAdmin,
		&i.Balance,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
