// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, email, password_hash, oidc_id, oidc_provider
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING username, email, password_hash, oidc_id, oidc_provider, deleted_at, created_at
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash sql.NullString
	OidcID       sql.NullString
	OidcProvider sql.NullString
}

// Create
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.OidcID,
		arg.OidcProvider,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.OidcID,
		&i.OidcProvider,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, email, password_hash, oidc_id, oidc_provider, deleted_at, created_at FROM users
WHERE username = $1 AND deleted_at IS NULL
`

// Read
func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.OidcID,
		&i.OidcProvider,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE username = $1
`

// Hard Delete
func (q *Queries) HardDeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, hardDeleteUser, username)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT username, email, password_hash, oidc_id, oidc_provider, deleted_at, created_at FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

// List with pagination
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.OidcID,
			&i.OidcProvider,
			&i.DeletedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET 
  deleted_at = CURRENT_TIMESTAMP
WHERE username = $1
`

// Delete (Soft Delete)
func (q *Queries) SoftDeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, softDeleteUser, username)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  email = $1, 
  password_hash = $2, 
  oidc_id = $3, 
  oidc_provider = $4
WHERE username = $5 AND deleted_at IS NULL
RETURNING username, email, password_hash, oidc_id, oidc_provider, deleted_at, created_at
`

type UpdateUserParams struct {
	Email        string
	PasswordHash sql.NullString
	OidcID       sql.NullString
	OidcProvider sql.NullString
	Username     string
}

// Update
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.PasswordHash,
		arg.OidcID,
		arg.OidcProvider,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.OidcID,
		&i.OidcProvider,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}
